---
import RootLayout from "$/layouts/RootLayout.astro";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  MarkdownHeading,
} from "astro";
import { getCollection, getEntry } from "astro:content";
import SlideOutPanel from "$/components/SlideOutPanel.astro";
import * as dndStyles from "$/styles/dnd.css";
import * as styles from "./slug.css";
import { assignInlineVars } from "@vanilla-extract/dynamic";

export const getStaticPaths = (async () => {
  const allHomebrew = await getCollection("homebrew");
  return allHomebrew.map((item) => ({
    params: {
      slug: item.slug,
    },
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params as InferGetStaticParamsType<
  typeof getStaticPaths
>;

const entry = await getEntry("homebrew", slug);

const { Content, headings } = await entry.render();

const filterOutHiddenHeadings = (
  headings: MarkdownHeading[],
): MarkdownHeading[] => {
  let isAfterHiddenHeading = false;
  return headings.filter((heading) => {
    if (heading.depth === 1 && heading.slug === "hidden") {
      isAfterHiddenHeading = true;
    }
    return !isAfterHiddenHeading;
  });
};

const tableOfContentHeadings = filterOutHiddenHeadings(headings)
  .filter((heading) => heading.depth > 1)
  .map((heading) => ({
    ...heading,
    depth: heading.depth - 1,
  }));
---

<script>
  import { elementIsTooWideForScreen } from "$/utils";

  const tables = document.querySelectorAll("table");

  tables.forEach((table) => {
    if (elementIsTooWideForScreen(table, 16)) {
      table.classList.add("shrink");
    }
  });
</script>

<RootLayout title={entry.data.title} ogImage={entry.data.banner}>
  {
    entry.data.banner && (
      <img
        class={styles.bannerImage}
        style={assignInlineVars({
          [styles.varBannerYPosition]: entry.data.bannerYPosition ?? "50%",
        })}
        src={entry.data.banner}
      />
    )
  }
  {
    tableOfContentHeadings.length > 0 && (
      <SlideOutPanel
        class:list={[styles.slideOutPanel, dndStyles.dndContainer]}
        closeOnClickSelector={`${styles.tableOfContents} a`}
      >
        <ol class={styles.tableOfContents}>
          {tableOfContentHeadings.map((heading) => (
            <li
              class={styles.tableOfContentsListItem}
              style={`--depth: ${heading.depth}`}
              data-depth={heading.depth}
            >
              <a href={`#${heading.slug}`}>{heading.text}</a>
            </li>
          ))}
        </ol>
      </SlideOutPanel>
    )
  }
  <div class={styles.wrapper}>
    <div class:list={[dndStyles.dndContainer, styles.content]}>
      <Content />
    </div>
  </div>
</RootLayout>
